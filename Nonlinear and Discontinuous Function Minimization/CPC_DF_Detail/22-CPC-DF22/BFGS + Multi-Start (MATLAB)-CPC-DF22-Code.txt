format long g;
global lb ub;
% Test Function 22
function fval = obj_function(param)
   logbase1 = param(1)+sin(param(2).*param(1)).*param(2);
   if logbase1 <= 0
      fval = 1e100;
      return;
   end

   powbase1 = (-param(1)-param(2));
   if powbase1 < 0
      fval = 1e100;
      return;
   end

   powbase2 = ((power(powbase1,(param(1)./param(2))))-(1./param(1)-param(1).*log(logbase1))+0.02.*param(2));
   if powbase2 < 0
      fval = 1e100;
      return;
   end

   powbase3 = (1./param(2)-cos(-param(1)+param(2))./param(1));
   if powbase3 < 0
      fval = 1e100;
      return;
   end

   powbase4 = (param(1).*param(2)-(power(powbase3,(param(1)-param(2))))-0.01.*param(1));
   if powbase4 < 0
      fval = 1e100;
      return;
   end

   fval = (power(powbase4,1.01))+(power(powbase2,1.01));
end
lb = [-100,-100];
ub = [100,100];
PopSz = 2000;
ParamNo = 2;





%% BFGS executive code
numRuns = 20;
numStarts = 20;   % Number of starting points for MultiStart

results_fval = zeros(numRuns, 1);        % Store objective function values
results_xOpt = zeros(numRuns, ParamNo);  % Store optimized variable values

best_fval = inf;

%% Constrained objective function with penalty
function fval = constrained_obj_function(x)
    global lb ub;
    penalty = sum(max(0, x - ub).^2 + max(0, lb - x).^2) * 1e+100; % Penalty term
    fval = obj_function(x) + penalty; % Add penalty to the objective function
end

%% Optimization settings for fminunc
options = optimoptions('fminunc', ...
    'Algorithm', 'quasi-newton', ...
    'Display', 'off', ...
    'MaxIterations', 2000);

%% MultiStart controller
ms = MultiStart('UseParallel', false, 'Display', 'iter');

for i = 1:numRuns
    fprintf('Run #%d MultiStart Optimization...\n', i);

    % Define optimization problem
    problem = createOptimProblem('fminunc', ...
        'objective', @constrained_obj_function, ...
        'x0', lb + (ub - lb) .* rand(1, ParamNo), ...
        'lb', lb, ...
        'ub', ub, ...
        'options', options);

    % Run MultiStart
    [xOpt, fval, exitflag] = run(ms, problem, numStarts);

    results_fval(i) = fval;
    results_xOpt(i, :) = xOpt;

    % Update best solution
    if fval < best_fval
        best_fval = fval;
        best_xOpt = xOpt;
    end

    % Print current run result
    fprintf('Run %d: Best objective value = %f\n', i, fval);
    fprintf('Optimized variables: %s\n', mat2str(xOpt));
end

% Print final best result
fprintf('\nFinal best objective value: %.16f\n', best_fval);
fprintf('Corresponding optimized variables: %s\n', mat2str(best_xOpt));

% Print results of all runs
disp('Objective values of all runs:');
disp(results_fval);

disp('Optimized variables of all runs:');
disp(results_xOpt);
