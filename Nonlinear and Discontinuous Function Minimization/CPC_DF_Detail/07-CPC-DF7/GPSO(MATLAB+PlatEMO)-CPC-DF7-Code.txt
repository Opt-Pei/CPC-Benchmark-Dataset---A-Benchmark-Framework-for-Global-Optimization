%% PlatEMO + MATLAB

format long g;

% Test Function 7
function fval = obj_function(x)
   logbase1 = 0.1-5.*sin((5+1).*(power(x(3),3.))/5+5);
   if logbase1 <= 0
      fval = 1e100;
      return;
   end

   logbase2 = 0.1-4.*sin((4+1).*(power(x(3),3.))/4+4);
   if logbase2 <= 0
      fval = 1e100;
      return;
   end

   logbase3 = 0.1-3.*sin((3+1).*(power(x(3),3.))/3+3);
   if logbase3 <= 0
      fval = 1e100;
      return;
   end

   logbase4 = 0.1-2.*sin((2+1).*(power(x(3),3.))/2+2);
   if logbase4 <= 0
      fval = 1e100;
      return;
   end

   logbase5 = 0.1-1.*sin((1+1).*(power(x(3),3.))/1+1);
   if logbase5 <= 0
      fval = 1e100;
      return;
   end

   logbase6 = 0.1-5.*sin((5+1).*(power(x(2),2.))/5+5);
   if logbase6 <= 0
      fval = 1e100;
      return;
   end

   logbase7 = 0.1-4.*sin((4+1).*(power(x(2),2.))/4+4);
   if logbase7 <= 0
      fval = 1e100;
      return;
   end

   logbase8 = 0.1-3.*sin((3+1).*(power(x(2),2.))/3+3);
   if logbase8 <= 0
      fval = 1e100;
      return;
   end

   logbase9 = 0.1-2.*sin((2+1).*(power(x(2),2.))/2+2);
   if logbase9 <= 0
      fval = 1e100;
      return;
   end

   logbase10 = 0.1-1.*sin((1+1).*(power(x(2),2.))/1+1);
   if logbase10 <= 0
      fval = 1e100;
      return;
   end

   logbase11 = 0.1-5.*sin((5+1).*(power(x(1),1.))/5+5);
   if logbase11 <= 0
      fval = 1e100;
      return;
   end

   logbase12 = 0.1-4.*sin((4+1).*(power(x(1),1.))/4+4);
   if logbase12 <= 0
      fval = 1e100;
      return;
   end

   logbase13 = 0.1-3.*sin((3+1).*(power(x(1),1.))/3+3);
   if logbase13 <= 0
      fval = 1e100;
      return;
   end

   logbase14 = 0.1-2.*sin((2+1).*(power(x(1),1.))/2+2);
   if logbase14 <= 0
      fval = 1e100;
      return;
   end

   logbase15 = 0.1-1.*sin((1+1).*(power(x(1),1.))/1+1);
   if logbase15 <= 0
      fval = 1e100;
      return;
   end

   fval = -(((log(logbase15))+log(logbase14)+log(logbase13)+log(logbase12)+log(logbase11))+(log(logbase10))+...
log(logbase9)+log(logbase8)+log(logbase7)+log(logbase6)+(log(logbase5))+log(logbase4)+log(logbase3)+...
log(logbase2)+log(logbase1));
end
lb = [-10,-10,-10];
ub = [10,10,10];
PopSz = 2000;
ParamNo = 3;



%% GPSO algorithm
f = @(x) obj_function(x);
numRuns = 20;
results = struct('bestObj', [], 'bestDec', []);

% Perform multiple optimization runs
for run = 1:numRuns
    fprintf('Run #%d starts\n', run); 
    rng(run); % Set random seed to ensure different initial values in each run
    [Dec, Obj, Con] = platemo('objFcn', f, 'D', ParamNo, 'algorithm', @GPSO, ...
        'lower', lb, 'upper', ub, 'maxFE', 100000, 'N', PopSz, 'run', run); % function from PlatEMO

    % Find the best solution in the current run
    [bestObjRun, bestIdx] = min(Obj);
    bestDecRun = Dec(bestIdx, :);

    % Store the results of the current run
    results(run).bestObj = bestObjRun;
    results(run).bestDec = bestDecRun;
    fprintf('Run #%d ends\n', run);
end

% Find the overall best solution among all runs
[overallBestObj, overallBestRunIdx] = min([results.bestObj]);
overallBestDec = results(overallBestRunIdx).bestDec;

% Output results of each run
disp('Results of each run:');
for run = 1:numRuns
    fprintf('Run %d - Best objective value: %.16f\n', run, results(run).bestObj);
    fprintf('Run %d - Best decision variables: [%s]\n', run, num2str(results(run).bestDec, '%.16f '));
end

% Output overall best result
disp('Overall best result:');
fprintf('Best objective value: %.16f\n', overallBestObj);
fprintf('Corresponding decision variables: [%s]\n', num2str(overallBestDec, '%.16f '));

% Output results in formatted style
disp('Final results:');
fprintf('Objective values:\n');
for run = 1:numRuns
    fprintf('%.16f\n', results(run).bestObj); % Print objective values of each run with 16 decimals
end

fprintf('\nDecision variables:\n');
for run = 1:numRuns
    decs = results(run).bestDec;   % Get the best decision variables of the current run
    fprintf('');                   % Placeholder for line header (customizable if needed)
    for d = 1:length(decs)
        fprintf('%.16f ', decs(d)); % Print each variable in order, separated by spaces
    end
    fprintf('\n'); % New line
end
