format long g;

% Test Function 7
function fval = obj_function(x)
   logbase1 = 0.1-5.*sin((5+1).*(power(x(3),3.))/5+5);
   if logbase1 <= 0
      fval = 1e100;
      return;
   end

   logbase2 = 0.1-4.*sin((4+1).*(power(x(3),3.))/4+4);
   if logbase2 <= 0
      fval = 1e100;
      return;
   end

   logbase3 = 0.1-3.*sin((3+1).*(power(x(3),3.))/3+3);
   if logbase3 <= 0
      fval = 1e100;
      return;
   end

   logbase4 = 0.1-2.*sin((2+1).*(power(x(3),3.))/2+2);
   if logbase4 <= 0
      fval = 1e100;
      return;
   end

   logbase5 = 0.1-1.*sin((1+1).*(power(x(3),3.))/1+1);
   if logbase5 <= 0
      fval = 1e100;
      return;
   end

   logbase6 = 0.1-5.*sin((5+1).*(power(x(2),2.))/5+5);
   if logbase6 <= 0
      fval = 1e100;
      return;
   end

   logbase7 = 0.1-4.*sin((4+1).*(power(x(2),2.))/4+4);
   if logbase7 <= 0
      fval = 1e100;
      return;
   end

   logbase8 = 0.1-3.*sin((3+1).*(power(x(2),2.))/3+3);
   if logbase8 <= 0
      fval = 1e100;
      return;
   end

   logbase9 = 0.1-2.*sin((2+1).*(power(x(2),2.))/2+2);
   if logbase9 <= 0
      fval = 1e100;
      return;
   end

   logbase10 = 0.1-1.*sin((1+1).*(power(x(2),2.))/1+1);
   if logbase10 <= 0
      fval = 1e100;
      return;
   end

   logbase11 = 0.1-5.*sin((5+1).*(power(x(1),1.))/5+5);
   if logbase11 <= 0
      fval = 1e100;
      return;
   end

   logbase12 = 0.1-4.*sin((4+1).*(power(x(1),1.))/4+4);
   if logbase12 <= 0
      fval = 1e100;
      return;
   end

   logbase13 = 0.1-3.*sin((3+1).*(power(x(1),1.))/3+3);
   if logbase13 <= 0
      fval = 1e100;
      return;
   end

   logbase14 = 0.1-2.*sin((2+1).*(power(x(1),1.))/2+2);
   if logbase14 <= 0
      fval = 1e100;
      return;
   end

   logbase15 = 0.1-1.*sin((1+1).*(power(x(1),1.))/1+1);
   if logbase15 <= 0
      fval = 1e100;
      return;
   end

   fval = -(((log(logbase15))+log(logbase14)+log(logbase13)+log(logbase12)+log(logbase11))+(log(logbase10))+...
log(logbase9)+log(logbase8)+log(logbase7)+log(logbase6)+(log(logbase5))+log(logbase4)+log(logbase3)+...
log(logbase2)+log(logbase1));
end
lb = [-10,-10,-10];
ub = [10,10,10];
PopSz = 2000;
ParamNo = 3;



%% SA executive code
numRuns = 20;

% Initialize arrays to store results
results_fval = zeros(numRuns, 1);        % Store objective function values
results_xOpt = zeros(numRuns, ParamNo);  % Store optimized variable values

% Set random seed (ensure different initial populations for each run)
rng('shuffle');

options = optimoptions('simulannealbnd', 'Display', 'Iter', 'MaxIterations', 2000);
best = 1E+100;

% Perform multiple SA optimizations
for i = 1:numRuns
    fprintf('Run #%d...\n', i);
    
    % Run SA
    x0 = lb + (ub - lb) .* rand(size(lb));
    [xOpt, fval] = simulannealbnd(@obj_function, x0, lb, ub, options);

    % Store results
    results_fval(i) = fval;
    results_xOpt(i, :) = xOpt;
    if best > fval
        best = fval;
        best_xOpt = xOpt;
    end
    % Print current run results
    fprintf('Run %d: Objective Function (Min.): %f\n', i, fval);
    fprintf('Optimized variable values: %s\n', mat2str(xOpt));
end

disp(best);
disp(best_xOpt);

% Output all results
disp('Objective function values of all runs:');
disp(results_fval);

disp('Optimized variable values of all runs:');
disp(results_xOpt);
