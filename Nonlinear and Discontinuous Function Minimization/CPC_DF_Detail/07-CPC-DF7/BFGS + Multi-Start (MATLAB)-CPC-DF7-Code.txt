format long g;
global lb ub;
% Test Function 7
function fval = obj_function(x)
   logbase1 = 0.1-5.*sin((5+1).*(power(x(3),3.))/5+5);
   if logbase1 <= 0
      fval = 1e100;
      return;
   end

   logbase2 = 0.1-4.*sin((4+1).*(power(x(3),3.))/4+4);
   if logbase2 <= 0
      fval = 1e100;
      return;
   end

   logbase3 = 0.1-3.*sin((3+1).*(power(x(3),3.))/3+3);
   if logbase3 <= 0
      fval = 1e100;
      return;
   end

   logbase4 = 0.1-2.*sin((2+1).*(power(x(3),3.))/2+2);
   if logbase4 <= 0
      fval = 1e100;
      return;
   end

   logbase5 = 0.1-1.*sin((1+1).*(power(x(3),3.))/1+1);
   if logbase5 <= 0
      fval = 1e100;
      return;
   end

   logbase6 = 0.1-5.*sin((5+1).*(power(x(2),2.))/5+5);
   if logbase6 <= 0
      fval = 1e100;
      return;
   end

   logbase7 = 0.1-4.*sin((4+1).*(power(x(2),2.))/4+4);
   if logbase7 <= 0
      fval = 1e100;
      return;
   end

   logbase8 = 0.1-3.*sin((3+1).*(power(x(2),2.))/3+3);
   if logbase8 <= 0
      fval = 1e100;
      return;
   end

   logbase9 = 0.1-2.*sin((2+1).*(power(x(2),2.))/2+2);
   if logbase9 <= 0
      fval = 1e100;
      return;
   end

   logbase10 = 0.1-1.*sin((1+1).*(power(x(2),2.))/1+1);
   if logbase10 <= 0
      fval = 1e100;
      return;
   end

   logbase11 = 0.1-5.*sin((5+1).*(power(x(1),1.))/5+5);
   if logbase11 <= 0
      fval = 1e100;
      return;
   end

   logbase12 = 0.1-4.*sin((4+1).*(power(x(1),1.))/4+4);
   if logbase12 <= 0
      fval = 1e100;
      return;
   end

   logbase13 = 0.1-3.*sin((3+1).*(power(x(1),1.))/3+3);
   if logbase13 <= 0
      fval = 1e100;
      return;
   end

   logbase14 = 0.1-2.*sin((2+1).*(power(x(1),1.))/2+2);
   if logbase14 <= 0
      fval = 1e100;
      return;
   end

   logbase15 = 0.1-1.*sin((1+1).*(power(x(1),1.))/1+1);
   if logbase15 <= 0
      fval = 1e100;
      return;
   end

   fval = -(((log(logbase15))+log(logbase14)+log(logbase13)+log(logbase12)+log(logbase11))+(log(logbase10))+...
log(logbase9)+log(logbase8)+log(logbase7)+log(logbase6)+(log(logbase5))+log(logbase4)+log(logbase3)+...
log(logbase2)+log(logbase1));
end
lb = [-10,-10,-10];
ub = [10,10,10];
PopSz = 2000;
ParamNo = 3;





%% BFGS executive code
numRuns = 20;
numStarts = 20;   % Number of starting points for MultiStart

results_fval = zeros(numRuns, 1);        % Store objective function values
results_xOpt = zeros(numRuns, ParamNo);  % Store optimized variable values

best_fval = inf;

%% Constrained objective function with penalty
function fval = constrained_obj_function(x)
    global lb ub;
    penalty = sum(max(0, x - ub).^2 + max(0, lb - x).^2) * 1e+100; % Penalty term
    fval = obj_function(x) + penalty; % Add penalty to the objective function
end

%% Optimization settings for fminunc
options = optimoptions('fminunc', ...
    'Algorithm', 'quasi-newton', ...
    'Display', 'off', ...
    'MaxIterations', 2000);

%% MultiStart controller
ms = MultiStart('UseParallel', false, 'Display', 'iter');

for i = 1:numRuns
    fprintf('Run #%d MultiStart Optimization...\n', i);

    % Define optimization problem
    problem = createOptimProblem('fminunc', ...
        'objective', @constrained_obj_function, ...
        'x0', lb + (ub - lb) .* rand(1, ParamNo), ...
        'lb', lb, ...
        'ub', ub, ...
        'options', options);

    % Run MultiStart
    [xOpt, fval, exitflag] = run(ms, problem, numStarts);

    results_fval(i) = fval;
    results_xOpt(i, :) = xOpt;

    % Update best solution
    if fval < best_fval
        best_fval = fval;
        best_xOpt = xOpt;
    end

    % Print current run result
    fprintf('Run %d: Best objective value = %f\n', i, fval);
    fprintf('Optimized variables: %s\n', mat2str(xOpt));
end

% Print final best result
fprintf('\nFinal best objective value: %.16f\n', best_fval);
fprintf('Corresponding optimized variables: %s\n', mat2str(best_xOpt));

% Print results of all runs
disp('Objective values of all runs:');
disp(results_fval);

disp('Optimized variables of all runs:');
disp(results_xOpt);
