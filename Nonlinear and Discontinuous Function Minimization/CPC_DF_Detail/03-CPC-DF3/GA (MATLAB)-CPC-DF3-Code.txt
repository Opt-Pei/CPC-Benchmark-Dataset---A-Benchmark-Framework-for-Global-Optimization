format long g;

% Test Function 3
function fval = obj_function(x)
   logbase1 = 33.*x(1)-x(1).*x(2)+5-(power(((power((x(1)-4),2))+(power((x(2)-5),2))-4),2));
   if logbase1 <= 0
      fval = 1e100;
      return;
   end

   logbase2 = cos(-2./3.*(power(x(1),3))-8.*(power(x(1),2)));
   if logbase2 <= 0
      fval = 1e100;
      return;
   end

   logbase3 = x(1)-x(2).*log(logbase2);
   if logbase3 <= 0
      fval = 1e100;
      return;
   end

   fval = -log(logbase3)-log(logbase1);
end
lb = [-100,-100];
ub = [100,100];
PopSz = 2000;
ParamNo = 2;



%% GA executive code
numRuns = 20;

% Initialize arrays to store results
results_fval = zeros(numRuns, 1);        % Store objective function values of each run
results_xOpt = zeros(numRuns, ParamNo);  % Store optimized variable values of each run

% Set random seed (ensure different initial populations for each run)
rng('shuffle');

options = optimoptions('ga', 'PopulationSize', PopSz, 'MaxGenerations', 2E3, 'Display', 'Iter');
best = 1E+100;

% Perform multiple GA optimizations
for i = 1:numRuns
    fprintf('Run #%d...\n', i);
    
    % Run GA
    [xOpt, fval] = ga(@obj_function, ParamNo, [], [], [], [], lb, ub, [], [], options);

    % Store results
    results_fval(i) = fval;
    results_xOpt(i, :) = xOpt;
    if best > fval
        best = fval;
        best_xOpt = xOpt;
    end
    % Print current run results
    fprintf('Run %d: Objective Function (Min.): %f\n', i, fval);
    fprintf('Optimized variable values: %s\n', mat2str(xOpt));
end

disp(best);
disp(best_xOpt);

% Output all results
disp('Objective function values of all runs:');
disp(results_fval);

disp('Optimized variable values of all runs:');
disp(results_xOpt);
