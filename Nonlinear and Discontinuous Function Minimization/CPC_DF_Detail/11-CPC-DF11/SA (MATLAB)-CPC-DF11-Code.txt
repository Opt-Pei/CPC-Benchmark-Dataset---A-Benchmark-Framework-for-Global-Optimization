format long g;

% Test Function 11
function fval = obj_function(x)
   sqrtbase1 = 0.001-abs(sin(x(1).*x(2)));
   if sqrtbase1 < 0
      fval = 1e100;
      return;
   end

   powbase1 = (abs(sin(x(2)))-8.0.*abs(cos(x(1)./((power(x(2),2))+1))));
   if powbase1 < 0
      fval = 1e100;
      return;
   end

   fval = cos(x(1)).*(power(powbase1,(1+sqrt(sqrtbase1))));
end
lb = [-6,-6];
ub = [6,6];
PopSz = 2000;
ParamNo = 2;



%% SA executive code
numRuns = 20;

% Initialize arrays to store results
results_fval = zeros(numRuns, 1);        % Store objective function values
results_xOpt = zeros(numRuns, ParamNo);  % Store optimized variable values

% Set random seed (ensure different initial populations for each run)
rng('shuffle');

options = optimoptions('simulannealbnd', 'Display', 'Iter', 'MaxIterations', 2000);
best = 1E+100;

% Perform multiple SA optimizations
for i = 1:numRuns
    fprintf('Run #%d...\n', i);
    
    % Run SA
    x0 = lb + (ub - lb) .* rand(size(lb));
    [xOpt, fval] = simulannealbnd(@obj_function, x0, lb, ub, options);

    % Store results
    results_fval(i) = fval;
    results_xOpt(i, :) = xOpt;
    if best > fval
        best = fval;
        best_xOpt = xOpt;
    end
    % Print current run results
    fprintf('Run %d: Objective Function (Min.): %f\n', i, fval);
    fprintf('Optimized variable values: %s\n', mat2str(xOpt));
end

disp(best);
disp(best_xOpt);

% Output all results
disp('Objective function values of all runs:');
disp(results_fval);

disp('Optimized variable values of all runs:');
disp(results_xOpt);
