format long g;

% Test Function 8

function fval = obj_function(x)

   powbase1 = (2+(power((x(1)-7),2))-2.*(power((x(2)-7),2)));
   if powbase1 < 0
      fval = 1e100;
      return;
   end

   powbase2 = ((sin(pi.*(x(1)-2)).*sin(pi.*(x(2)-2)))./((power(pi,2.))*x(1).*(x(1)-2).*(x(2)-2)));
   if powbase2 < 0
      fval = 1e100;
      return;
   end

   fval = 1-(power(powbase2,1.03))+(power(powbase1,0.65));
end
lb = [0,0];
ub = [14,14];
PopSz = 2000;
ParamNo = 2;



%% SA executive code
numRuns = 20;

% Initialize arrays to store results
results_fval = zeros(numRuns, 1);        % Store objective function values
results_xOpt = zeros(numRuns, ParamNo);  % Store optimized variable values

% Set random seed (ensure different initial populations for each run)
rng('shuffle');

options = optimoptions('simulannealbnd', 'Display', 'Iter', 'MaxIterations', 2000);
best = 1E+100;

% Perform multiple SA optimizations
for i = 1:numRuns
    fprintf('Run #%d...\n', i);
    
    % Run SA
    x0 = lb + (ub - lb) .* rand(size(lb));
    [xOpt, fval] = simulannealbnd(@obj_function, x0, lb, ub, options);

    % Store results
    results_fval(i) = fval;
    results_xOpt(i, :) = xOpt;
    if best > fval
        best = fval;
        best_xOpt = xOpt;
    end
    % Print current run results
    fprintf('Run %d: Objective Function (Min.): %f\n', i, fval);
    fprintf('Optimized variable values: %s\n', mat2str(xOpt));
end

disp(best);
disp(best_xOpt);

% Output all results
disp('Objective function values of all runs:');
disp(results_fval);

disp('Optimized variable values of all runs:');
disp(results_xOpt);
