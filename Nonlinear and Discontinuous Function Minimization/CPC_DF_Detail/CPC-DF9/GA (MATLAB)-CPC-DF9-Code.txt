format long g;

% Test Function 9

function fval = obj_function(x)
   powbase1 = ((power(x(1),2))+(power(x(2),3))-1);
   if powbase1 < 0
      fval = 1e100;
      return;
   end

   powbase2 = (x(1)+(power(x(2),2))-7);
   if powbase2 < 0
      fval = 1e100;
      return;
   end

   powbase3 = ((power(x(1),2))+x(2)-10);
   if powbase3 < 0
      fval = 1e100;
      return;
   end

   fval = (power(powbase3,(1.02.*cos(x(1)))))+(power(powbase2,(1.02+sin(x(2))))).*(power(powbase1,(1.02+...
cos(x(1).*x(2)))));
end
lb = [-10,-10];
ub = [10,10];
PopSz = 2000;
ParamNo = 2;



%% GA executive code
numRuns = 20;

% Initialize arrays to store results
results_fval = zeros(numRuns, 1);        % Store objective function values of each run
results_xOpt = zeros(numRuns, ParamNo);  % Store optimized variable values of each run

% Set random seed (ensure different initial populations for each run)
rng('shuffle');

options = optimoptions('ga', 'PopulationSize', PopSz, 'MaxGenerations', 2E3, 'Display', 'Iter');
best = 1E+100;

% Perform multiple GA optimizations
for i = 1:numRuns
    fprintf('Run #%d...\n', i);
    
    % Run GA
    [xOpt, fval] = ga(@obj_function, ParamNo, [], [], [], [], lb, ub, [], [], options);

    % Store results
    results_fval(i) = fval;
    results_xOpt(i, :) = xOpt;
    if best > fval
        best = fval;
        best_xOpt = xOpt;
    end
    % Print current run results
    fprintf('Run %d: Objective Function (Min.): %f\n', i, fval);
    fprintf('Optimized variable values: %s\n', mat2str(xOpt));
end

disp(best);
disp(best_xOpt);

% Output all results
disp('Objective function values of all runs:');
disp(results_fval);

disp('Optimized variable values of all runs:');
disp(results_xOpt);
