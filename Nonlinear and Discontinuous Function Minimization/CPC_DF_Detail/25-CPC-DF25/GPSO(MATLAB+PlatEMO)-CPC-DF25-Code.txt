%% PlatEMO + MATLAB

format long g;

% Test Function 25
function fval = obj_function(x)
   logbase1 = sin(x(2).*pi)-(cos(2.*x(2)-x(3)+pi./2)-x(2)./2);
   if logbase1 <= 0
      fval = 1e100;
      return;
   end

   sqrtbase1 = log(logbase1);
   if sqrtbase1 < 0
      fval = 1e100;
      return;
   end

   sqrtbase2 = sin(x(2)-pi./2)+cos(x(3)-pi);
   if sqrtbase2 < 0
      fval = 1e100;
      return;
   end

   logbase2 = sqrt(sqrtbase2)+0.25.*x(2)+1;
   if logbase2 <= 0
      fval = 1e100;
      return;
   end

   logbase3 = sin(x(1).*pi)-(cos(2.*x(1)-x(2)+pi./2)-x(1)./1);
   if logbase3 <= 0
      fval = 1e100;
      return;
   end

   sqrtbase3 = log(logbase3);
   if sqrtbase3 < 0
      fval = 1e100;
      return;
   end

   sqrtbase4 = sin(x(1)-pi./2)+cos(x(2)-pi);
   if sqrtbase4 < 0
      fval = 1e100;
      return;
   end

   logbase4 = sqrt(sqrtbase4)+0.25.*x(1)+1;
   if logbase4 <= 0
      fval = 1e100;
      return;
   end

   fval = -(((log(logbase4))./(sqrt(sqrtbase3)+0.1))+(log(logbase2))./(sqrt(sqrtbase1)+0.1));
end
lb = [-10,-10,-10];
ub = [10,10,10];
PopSz = 2000;
ParamNo = 3;




%% GPSO algorithm
f = @(x) obj_function(x);
numRuns = 20;
results = struct('bestObj', [], 'bestDec', []);

% Perform multiple optimization runs
for run = 1:numRuns
    fprintf('Run #%d starts\n', run); 
    rng(run); % Set random seed to ensure different initial values in each run
    [Dec, Obj, Con] = platemo('objFcn', f, 'D', ParamNo, 'algorithm', @GPSO, ...
        'lower', lb, 'upper', ub, 'maxFE', 100000, 'N', PopSz, 'run', run); % function from PlatEMO

    % Find the best solution in the current run
    [bestObjRun, bestIdx] = min(Obj);
    bestDecRun = Dec(bestIdx, :);

    % Store the results of the current run
    results(run).bestObj = bestObjRun;
    results(run).bestDec = bestDecRun;
    fprintf('Run #%d ends\n', run);
end

% Find the overall best solution among all runs
[overallBestObj, overallBestRunIdx] = min([results.bestObj]);
overallBestDec = results(overallBestRunIdx).bestDec;

% Output results of each run
disp('Results of each run:');
for run = 1:numRuns
    fprintf('Run %d - Best objective value: %.16f\n', run, results(run).bestObj);
    fprintf('Run %d - Best decision variables: [%s]\n', run, num2str(results(run).bestDec, '%.16f '));
end

% Output overall best result
disp('Overall best result:');
fprintf('Best objective value: %.16f\n', overallBestObj);
fprintf('Corresponding decision variables: [%s]\n', num2str(overallBestDec, '%.16f '));

% Output results in formatted style
disp('Final results:');
fprintf('Objective values:\n');
for run = 1:numRuns
    fprintf('%.16f\n', results(run).bestObj); % Print objective values of each run with 16 decimals
end

fprintf('\nDecision variables:\n');
for run = 1:numRuns
    decs = results(run).bestDec;   % Get the best decision variables of the current run
    fprintf('');                   % Placeholder for line header (customizable if needed)
    for d = 1:length(decs)
        fprintf('%.16f ', decs(d)); % Print each variable in order, separated by spaces
    end
    fprintf('\n'); % New line
end
