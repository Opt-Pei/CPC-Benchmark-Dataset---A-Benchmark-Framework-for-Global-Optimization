format long g;

% Test Function 18
function fval = obj_function(x)
   logbase1 = x(3)+x(4)-x(2)-x(1);
   if logbase1 <= 0
      fval = 1e100;
      return;
   end

   powbase1 = (x(4).*x(1)-2./log(logbase1));
   if powbase1 < 0
      fval = 1e100;
      return;
   end

   powbase2 = (0.651-((x(4).*(power(x(2),5)))./x(3)).*(power((x(4).*x(1)-2./log(logbase1)),0.5)));
   if powbase2 < 0
      fval = 1e100;
      return;
   end

   logbase2 = logbase1;
   if logbase2 <= 0
      fval = 1e100;
      return;
   end

   powbase3 = (0.0463.*x(3)-((power(x(1),2.))/x(2)).*(2./log(logbase1)));
   if powbase3 < 0
      fval = 1e100;
      return;
   end

   logbase3 = x(1)-exp(x(1)./x(2)-x(3)./x(4));
   if logbase3 <= 0
      fval = 1e100;
      return;
   end

   powbase4 = (-x(2).*log(logbase3));
   if powbase4 < 0
      fval = 1e100;
      return;
   end

   logbase4 = -2.*x(3)-x(4)-2.*x(2);
   if logbase4 <= 0
      fval = 1e100;
      return;
   end

   powbase5 = (2-log(logbase4)-(power((-x(2).*log(logbase3)),0.75)));
   if powbase5 < 0
      fval = 1e100;
      return;
   end

   powbase6 = (x(2)-x(3)+x(4));
   if powbase6 < 0
      fval = 1e100;
      return;
   end

   powbase7 = (2.*x(1)-(power(powbase6,(10.3-x(1)))));
   if powbase7 < 0
      fval = 1e100;
      return;
   end

   fval = (power(powbase7,(2+1./100)))+(power(powbase5,(2+2./100)))+(power(powbase3,(2+3./100)))+(power((0.651-...
((x(4).*(power(x(2),5)))./x(3)).*(power((x(4).*x(1)-2./log(logbase2)),0.5))),(2+4./100)));
end
lb = [-5000,-5000,-5000,-5000];
ub = [5000,5000,5000,5000];
PopSz = 2000;
ParamNo = 4;


%% GA executive code
numRuns = 20;

% Initialize arrays to store results
results_fval = zeros(numRuns, 1);        % Store objective function values of each run
results_xOpt = zeros(numRuns, ParamNo);  % Store optimized variable values of each run

% Set random seed (ensure different initial populations for each run)
rng('shuffle');

options = optimoptions('ga', 'PopulationSize', PopSz, 'MaxGenerations', 2E3, 'Display', 'Iter');
best = 1E+100;

% Perform multiple GA optimizations
for i = 1:numRuns
    fprintf('Run #%d...\n', i);
    
    % Run GA
    [xOpt, fval] = ga(@obj_function, ParamNo, [], [], [], [], lb, ub, [], [], options);

    % Store results
    results_fval(i) = fval;
    results_xOpt(i, :) = xOpt;
    if best > fval
        best = fval;
        best_xOpt = xOpt;
    end
    % Print current run results
    fprintf('Run %d: Objective Function (Min.): %f\n', i, fval);
    fprintf('Optimized variable values: %s\n', mat2str(xOpt));
end

disp(best);
disp(best_xOpt);

% Output all results
disp('Objective function values of all runs:');
disp(results_fval);

disp('Optimized variable values of all runs:');
disp(results_xOpt);
