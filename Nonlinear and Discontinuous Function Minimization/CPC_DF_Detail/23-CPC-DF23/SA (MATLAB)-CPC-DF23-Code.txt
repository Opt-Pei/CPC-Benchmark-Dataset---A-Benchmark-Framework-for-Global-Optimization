format long g;

% Test Function 23
function fval = obj_function(x)
   sqrtbase1 = cos(4.*x(4))-sin(4.*x(5));
   if sqrtbase1 < 0
      fval = 1e100;
      return;
   end

   sqrtbase2 = cos(3.*x(3))-sin(3.*x(4));
   if sqrtbase2 < 0
      fval = 1e100;
      return;
   end

   sqrtbase3 = cos(2.*x(2))-sin(2.*x(3));
   if sqrtbase3 < 0
      fval = 1e100;
      return;
   end

   sqrtbase4 = cos(1.*x(1))-sin(1.*x(2));
   if sqrtbase4 < 0
      fval = 1e100;
      return;
   end

   logbase1 = 1./5.*((sin(sqrt(sqrtbase4)))+sin(sqrt(sqrtbase3))+sin(sqrt(sqrtbase2))+sin(sqrt(sqrtbase1)));
   if logbase1 <= 0
      fval = 1e100;
      return;
   end

   sqrtbase5 = 1./5.*(((power(x(1),2.))/1-(power(x(2),1)))+(power(x(2),2.))/2-(power(x(3),2))+(power(x(3),2.))/3-(power(x(4),3))+(power(x(4),2.))/4-(power(x(5),4)));
   if sqrtbase5 < 0
      fval = 1e100;
      return;
   end

   fval = -20.*exp(0-0.2.*sqrt(sqrtbase5))-log(logbase1);
end
lb = [-50,-50,-50,-50,-50];
ub = [50,50,50,50,50];
PopSz = 2000;
ParamNo = 5;




%% SA executive code
numRuns = 20;

% Initialize arrays to store results
results_fval = zeros(numRuns, 1);        % Store objective function values
results_xOpt = zeros(numRuns, ParamNo);  % Store optimized variable values

% Set random seed (ensure different initial populations for each run)
rng('shuffle');

options = optimoptions('simulannealbnd', 'Display', 'Iter', 'MaxIterations', 2000);
best = 1E+100;

% Perform multiple SA optimizations
for i = 1:numRuns
    fprintf('Run #%d...\n', i);
    
    % Run SA
    x0 = lb + (ub - lb) .* rand(size(lb));
    [xOpt, fval] = simulannealbnd(@obj_function, x0, lb, ub, options);

    % Store results
    results_fval(i) = fval;
    results_xOpt(i, :) = xOpt;
    if best > fval
        best = fval;
        best_xOpt = xOpt;
    end
    % Print current run results
    fprintf('Run %d: Objective Function (Min.): %f\n', i, fval);
    fprintf('Optimized variable values: %s\n', mat2str(xOpt));
end

disp(best);
disp(best_xOpt);

% Output all results
disp('Objective function values of all runs:');
disp(results_fval);

disp('Optimized variable values of all runs:');
disp(results_xOpt);
