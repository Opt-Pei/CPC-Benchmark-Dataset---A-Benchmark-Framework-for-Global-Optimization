format long g;
global lb ub;
% Test Function 18
function fval = obj_function(x)
   logbase1 = x(3)+x(4)-x(2)-x(1);
   if logbase1 <= 0
      fval = 1e100;
      return;
   end

   powbase1 = (x(4).*x(1)-2./log(logbase1));
   if powbase1 < 0
      fval = 1e100;
      return;
   end

   powbase2 = (0.651-((x(4).*(power(x(2),5)))./x(3)).*(power((x(4).*x(1)-2./log(logbase1)),0.5)));
   if powbase2 < 0
      fval = 1e100;
      return;
   end

   logbase2 = logbase1;
   if logbase2 <= 0
      fval = 1e100;
      return;
   end

   powbase3 = (0.0463.*x(3)-((power(x(1),2.))/x(2)).*(2./log(logbase1)));
   if powbase3 < 0
      fval = 1e100;
      return;
   end

   logbase3 = x(1)-exp(x(1)./x(2)-x(3)./x(4));
   if logbase3 <= 0
      fval = 1e100;
      return;
   end

   powbase4 = (-x(2).*log(logbase3));
   if powbase4 < 0
      fval = 1e100;
      return;
   end

   logbase4 = -2.*x(3)-x(4)-2.*x(2);
   if logbase4 <= 0
      fval = 1e100;
      return;
   end

   powbase5 = (2-log(logbase4)-(power((-x(2).*log(logbase3)),0.75)));
   if powbase5 < 0
      fval = 1e100;
      return;
   end

   powbase6 = (x(2)-x(3)+x(4));
   if powbase6 < 0
      fval = 1e100;
      return;
   end

   powbase7 = (2.*x(1)-(power(powbase6,(10.3-x(1)))));
   if powbase7 < 0
      fval = 1e100;
      return;
   end

   fval = (power(powbase7,(2+1./100)))+(power(powbase5,(2+2./100)))+(power(powbase3,(2+3./100)))+(power((0.651-...
((x(4).*(power(x(2),5)))./x(3)).*(power((x(4).*x(1)-2./log(logbase2)),0.5))),(2+4./100)));
end
lb = [-5000,-5000,-5000,-5000];
ub = [5000,5000,5000,5000];
PopSz = 2000;
ParamNo = 4;





%% BFGS executive code
numRuns = 20;
numStarts = 20;   % Number of starting points for MultiStart

results_fval = zeros(numRuns, 1);        % Store objective function values
results_xOpt = zeros(numRuns, ParamNo);  % Store optimized variable values

best_fval = inf;

%% Constrained objective function with penalty
function fval = constrained_obj_function(x)
    global lb ub;
    penalty = sum(max(0, x - ub).^2 + max(0, lb - x).^2) * 1e+100; % Penalty term
    fval = obj_function(x) + penalty; % Add penalty to the objective function
end

%% Optimization settings for fminunc
options = optimoptions('fminunc', ...
    'Algorithm', 'quasi-newton', ...
    'Display', 'off', ...
    'MaxIterations', 2000);

%% MultiStart controller
ms = MultiStart('UseParallel', false, 'Display', 'iter');

for i = 1:numRuns
    fprintf('Run #%d MultiStart Optimization...\n', i);

    % Define optimization problem
    problem = createOptimProblem('fminunc', ...
        'objective', @constrained_obj_function, ...
        'x0', lb + (ub - lb) .* rand(1, ParamNo), ...
        'lb', lb, ...
        'ub', ub, ...
        'options', options);

    % Run MultiStart
    [xOpt, fval, exitflag] = run(ms, problem, numStarts);

    results_fval(i) = fval;
    results_xOpt(i, :) = xOpt;

    % Update best solution
    if fval < best_fval
        best_fval = fval;
        best_xOpt = xOpt;
    end

    % Print current run result
    fprintf('Run %d: Best objective value = %f\n', i, fval);
    fprintf('Optimized variables: %s\n', mat2str(xOpt));
end

% Print final best result
fprintf('\nFinal best objective value: %.16f\n', best_fval);
fprintf('Corresponding optimized variables: %s\n', mat2str(best_xOpt));

% Print results of all runs
disp('Objective values of all runs:');
disp(results_fval);

disp('Optimized variables of all runs:');
disp(results_xOpt);
